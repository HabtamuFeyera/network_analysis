{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c700e718",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 1: Import necessary libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix\n",
    "\n",
    "import json\n",
    "import pandas as pd\n",
    "\n",
    "# Specify the full path to the JSON files\n",
    "json_files = [\"/home/habte/Anonymized_B6SlackExport_25Nov23/anonymized/machine-learning/2022-11-18.json\"]\n",
    "\n",
    "# Load JSON files into a list\n",
    "data = []\n",
    "for file in json_files:\n",
    "    with open(file, 'r') as f:\n",
    "        data.extend(json.load(f))\n",
    "\n",
    "# Create a DataFrame\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "print(f\"Number of messages: {data.shape[0]}\")\n",
    "print(f\"Number of columns: {data.shape[1]}\")\n",
    "\n",
    "# Step 4: Generate a report regarding types of the data in each column\n",
    "data_types_report = data.dtypes\n",
    "print(\"Data types in each column:\")\n",
    "print(data_types_report)\n",
    "\n",
    "# Step 5: Identify missing and NA values in each column\n",
    "missing_values_report = data.isnull().sum()\n",
    "print(\"Missing values in each column:\")\n",
    "print(missing_values_report)\n",
    "\n",
    "# Step 6: Identify the target value that is to be predicted\n",
    "# For example, you might want to predict if a message is important or not\n",
    "target_column = 'is_important'\n",
    "target_values = data[target_column].unique()\n",
    "print(f\"Target values: {target_values}\")\n",
    "\n",
    "#  Data type casting\n",
    "# Perform data type casting if needed\n",
    "\n",
    "# : Handling missing/NA values\n",
    "# Handle missing values using various techniques\n",
    "\n",
    "# Step 9: Encoding categorical values\n",
    "# Use LabelEncoder or OneHotEncoder for encoding categorical values\n",
    "\n",
    "# Step 10: Normalizing/standardizing numerical values\n",
    "# Use StandardScaler to normalize/standardize numerical values\n",
    "\n",
    "# Step 11: Correlations and linear relationships\n",
    "# Use correlations, heatmap, correlation matrix, pairplots to determine linear relationships\n",
    "\n",
    "# Step 12: Learn the distribution of data points\n",
    "# Use box plots, histograms, bar charts to identify outliers and understand overall distribution\n",
    "\n",
    "# Step 13: Dimensionality reduction and feature engineering\n",
    "# Perform dimensionality reduction and feature engineering as needed\n",
    "\n",
    "# Step 14: Modeling\n",
    "# Select a classification model (e.g., RandomForestClassifier)\n",
    "# Split the dataset into train and test sets\n",
    "X = data.drop(columns=[target_column])\n",
    "y = data[target_column]\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Build the model\n",
    "model = RandomForestClassifier()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Step 15: Metrics\n",
    "# Evaluate the model using classification metrics\n",
    "y_pred = model.predict(X_test)\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n",
    "print(\"Precision:\", precision_score(y_test, y_pred, average='macro'))\n",
    "print(\"Recall:\", recall_score(y_test, y_pred, average='macro'))\n",
    "print(\"F1 Score:\", f1_score(y_test, y_pred, average='macro'))\n",
    "print(\"Confusion Matrix:\")\n",
    "print(confusion_matrix(y_test, y_pred))\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}